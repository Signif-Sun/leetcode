class Solution {

private:
int r[1000];
public:
int climbStairs(int n) {
//斐波纳契数利用数组变种方式，减少运算数量
	if(n==1 || n==2)
		return n;
	r[1]=1;
	r[2]=2;
	for(int i=3;i<=n;i++)
	{
		r[i]=r[i-1]+r[i-2];
	}
	return r[n];
        
        //斐波纳契数利用递归方式
                /*int total;

        // 递归调用

                if (n == 1 || n == 2)
                        total = n;
                else
                        total = climbStairs(n - 2) + climbStairs(n - 1);
                return total;*/

}

};

public class Solution {

public int climbStairs(int n) {
    if(n == 0 || n == 1 || n == 2){return n;}
    int[] mem = new int[n];
    mem[0] = 1;
    mem[1] = 2;
    for(int i = 2; i < n; i++){
        mem[i] = mem[i-1] + mem[i-2];
    }
    return mem[n-1];
}


int climbStairs(int n) {
    int a = 1, b = 1;
    while (n--)
        a = (b += a) - a;
    return a;
}
